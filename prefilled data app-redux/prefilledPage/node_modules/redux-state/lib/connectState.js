'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _actions = require('./actions');

var actions = _interopRequireWildcard(_actions);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('./propTypes');

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _nextStateId = require('./nextStateId');

var _nextStateId2 = _interopRequireDefault(_nextStateId);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj["default"] = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultMapStateToProps = function defaultMapStateToProps() {
    return {};
};
var defaultMapDispatchToProps = function defaultMapDispatchToProps(stateDispatch) {
    return { stateDispatch: stateDispatch };
};
var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
    return _extends({}, parentProps, stateProps, dispatchProps);
};

var getStateOfStates = function getStateOfStates(store) {
    return store.getState().states;
};
var checkStateConnected = function checkStateConnected(store) {
    return (0, _invariant2["default"])(getStateOfStates(store), 'Should add statesReducer into the store');
};

var createStateDispatch = function createStateDispatch(store, stateId) {
    var stateDispatch = function stateDispatch(action) {
        var states = getStateOfStates(store);
        (0, _invariant2["default"])(states[stateId], 'Somebody trying get state when component`s already unmount');

        if (typeof action === 'function') {
            var getState = function getState() {
                var state = states[stateId].state;

                return state;
            };
            return action(stateDispatch, getState, store);
        }

        store.dispatch(_extends({}, action, {
            meta: _extends({}, action.meta, {
                stateId: stateId
            })
        }));
    };

    return stateDispatch;
};

var connectState = function connectState() {
    var mapStateOfStateToProps = arguments.length <= 0 || arguments[0] === undefined ? defaultMapStateToProps : arguments[0];
    var mapStateDispatchToProps = arguments.length <= 1 || arguments[1] === undefined ? defaultMapDispatchToProps : arguments[1];
    var mergeProps = arguments.length <= 2 || arguments[2] === undefined ? defaultMergeProps : arguments[2];
    var stateReducer = arguments[3];
    var passIdIntoContext = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];


    var mapStateToProps = function mapStateToProps(store, stateId, props) {
        var _getStateOfStates = getStateOfStates(store);

        var stateOfState = _getStateOfStates[stateId].state;


        return mapStateOfStateToProps(stateOfState, props, store.getState());
    };
    var mapDispatchToProps = function mapDispatchToProps(store, stateId, props) {
        var stateDispatch = createStateDispatch(store, stateId);
        return mapStateDispatchToProps(stateDispatch, props, store.dispatch);
    };

    return function (WrappedComponent) {
        var ReduxState = function (_Component) {
            _inherits(ReduxState, _Component);

            function ReduxState(_, context) {
                _classCallCheck(this, ReduxState);

                var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReduxState).call(this));

                _this.state = {
                    reduxState: context.store.getState()
                };
                return _this;
            }

            _createClass(ReduxState, [{
                key: 'getChildContext',
                value: function getChildContext() {
                    if (passIdIntoContext) {
                        return {
                            stateId: this.state.stateId
                        };
                    }

                    return {};
                }
            }, {
                key: 'componentDidMount',
                value: function componentDidMount() {
                    var _this2 = this;

                    var store = this.context.store;


                    this.unsubscribe = store.subscribe(function () {
                        if (!_this2.unsubscribe) {
                            return;
                        }

                        _this2.setState({
                            reduxState: store.getState()
                        });
                    }, this.forceUpdate());
                }
            }, {
                key: 'componentWillMount',
                value: function componentWillMount() {
                    var store = this.context.store;

                    checkStateConnected(store);

                    if (stateReducer) {
                        var _props$stateId = this.props.stateId;
                        var stateId = _props$stateId === undefined ? (0, _nextStateId2["default"])() : _props$stateId;

                        this.setState({ stateId: stateId });

                        store.dispatch(actions.initState(stateId, stateReducer));
                    } else {
                        var stateId = this.context.stateId;


                        (0, _invariant2["default"])(typeof stateId !== 'undefined', 'Should declare component with reducer');

                        this.setState({ stateId: stateId });
                    }
                }
            }, {
                key: 'componentWillUnmount',
                value: function componentWillUnmount() {
                    var _this3 = this;

                    this.unsubscribe();

                    this.unsubscribe = null;

                    if (stateReducer) {
                        (function () {
                            var stateId = _this3.state.stateId;
                            var store = _this3.context.store;


                            setTimeout(function () {
                                return store.dispatch(actions.removeState(stateId));
                            }, 0);
                        })();
                    }
                }
            }, {
                key: 'render',
                value: function render() {
                    var store = this.context.store;
                    var stateId = this.state.stateId;


                    var stateProps = mapStateToProps(store, stateId, this.props);
                    var dispatchProps = mapDispatchToProps(store, stateId, this.props);
                    var mergedProps = mergeProps(stateProps, dispatchProps, this.props);

                    return _react2["default"].createElement(WrappedComponent, mergedProps);
                }
            }]);

            return ReduxState;
        }(_react.Component);

        ReduxState.childContextTypes = {
            stateId: _propTypes.stateIdPropType
        };

        ReduxState.contextTypes = {
            stateId: _propTypes.stateIdPropType,
            store: _propTypes.storePropType
        };
        return (0, _hoistNonReactStatics2["default"])(ReduxState, WrappedComponent);
    };
};

exports["default"] = connectState;