'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _actionTypes = require('./actionTypes');

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var stateCreator = function stateCreator(stateId, stateReducer) {
    return {
        stateId: stateId,
        state: stateReducer(),
        stateReducer: stateReducer
    };
};
var initialState = {};

var statesReducer = function statesReducer() {
    var state = arguments.length <= 0 || arguments[0] === undefined ? initialState : arguments[0];
    var action = arguments[1];


    switch (action.type) {
        case _actionTypes.INIT_STATE:
            {
                var _action$payload = action.payload;
                var _stateId2 = _action$payload.stateId;
                var stateReducer = _action$payload.stateReducer;

                // TODO check if stateId's already registered

                return _extends({}, state, _defineProperty({}, _stateId2, stateCreator(_stateId2, stateReducer)));
            }
        case _actionTypes.REMOVE_STATE:
            {
                var _stateId3 = action.payload.stateId;
                var stateToRemove = state[_stateId3];

                var restStates = _objectWithoutProperties(state, [_stateId3]);

                return restStates;
            }
    }

    var stateId = action.meta && action.meta.stateId;

    if (typeof stateId !== 'undefined') {
        var stateToUpdate = state[stateId];

        var restStates = _objectWithoutProperties(state, [stateId]);

        var stateOfStateToUpdate = stateToUpdate.state;

        var restOfStateToUpdate = _objectWithoutProperties(stateToUpdate, ['state']);

        return _extends({}, restStates, _defineProperty({}, stateId, _extends({}, restOfStateToUpdate, {
            state: stateToUpdate.stateReducer(stateOfStateToUpdate, action)
        })));
    }

    return Object.keys(state).reduce(function (updatedStates, _stateId) {
        var stateToUpdate = updatedStates[_stateId];

        var restStates = _objectWithoutProperties(updatedStates, [_stateId]);

        var stateOfStateToUpdate = stateToUpdate.state;

        var restOfStateToUpdate = _objectWithoutProperties(stateToUpdate, ['state']);

        return _extends({}, restStates, _defineProperty({}, _stateId, _extends({}, restOfStateToUpdate, {
            state: stateToUpdate.stateReducer(stateOfStateToUpdate, action)
        })));
    }, state);
};

exports["default"] = statesReducer;